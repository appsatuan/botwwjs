const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const express = require('express');
const bodyParser = require('body-parser');
const app = express();
const port = 8000;
let isClientReady = false;

// Set up the WhatsApp client
const client = new Client({
    authStrategy: new LocalAuth({ clientId: "my-client-id" }),
    puppeteer: {
        headless: true,
        args: ['--no-sandbox', '--disable-gpu'],
    },
    webVersionCache: {
        type: 'remote',
        remotePath: 'https://raw.githubusercontent.com/wppconnect-team/wa-version/main/html/2.2412.54.html'
    },
    logger: console,
});

// Event handler for QR code generation
client.on('qr', qr => {
    console.log('QR Code received. Scan the QR code below:');
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('WhatsApp client is ready!');
    isClientReady = true;
});

client.on('authenticated', () => {
    console.log('WhatsApp client authenticated!');
});

client.on('auth_failure', (message) => {
    console.error('Authentication failure:', message);
});

// Start the WhatsApp client
client.initialize();

// Function to format phone numbers to the correct WhatsApp format
function formatPhoneNumber(number) {
    number = number.replace(/\D/g, '');

    if (number.startsWith('08')) {
        number = '628' + number.slice(2);
    }

    if (number.startsWith('62')) {
        number = '62' + number.slice(2);
    }

    return number;
}

// Middleware to parse JSON request bodies
app.use(bodyParser.json());

// Middleware to parse URL-encoded form data
app.use(bodyParser.urlencoded({ extended: true }));

// Express endpoint to send messages
app.post('/send-message', async (req, res) => {
    const { number, message, media, mediaUrl } = req.body;

    if (!number || (!message && !media && !mediaUrl)) {
        return res.status(400).send({ error: 'Missing number, message, or media parameter' });
    }

    const formattedNumber = formatPhoneNumber(number) + '@c.us';

    try {
        if (mediaUrl) {
            const mediaObject = await MessageMedia.fromUrl(mediaUrl);
            await client.sendMessage(formattedNumber, mediaObject, { caption: message });
        } else if (media) {
            const mediaObject = MessageMedia.fromFilePath(media);
            await client.sendMessage(formattedNumber, mediaObject, { caption: message });
        } else {
            await client.sendMessage(formattedNumber, message);
        }
        res.status(200).send({ success: true, message: 'Message sent successfully' });
    } catch (error) {
        console.error('Error sending message:', error);
        res.status(500).send({ error: 'Failed to send message' });
    }
});


app.get('/', (req, res) => {
    if (isClientReady) {
        res.send('client ready');
    } else {
        res.send('not');
    }
});

// Start the Express server
app.listen(port, '0.0.0.0', () => {
    console.log(`API server running at http://localhost:${port}`);
});

